#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('attic:server');
var http = require('http');

var mongoose = require("mongoose");

//loading my models
var Note = require('../models/NoteModel');
var Tag = require('../models/TagModel');
var User = require('../models/UserModel');


//loading controllers, just to check immediately.
var AuthController = require('../controllers/AuthController');
var NoteController = require('../controllers/NoteController');
var TagController = require('../controllers/TagController');
var UserController = require('../controllers/UserController');

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || '3000');
var port = process.env.PORT || 5000; /*heroku listnes locally to 5000.*/
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// var express = require('express');
// app.use(express.json());       // to support JSON-encoded bodies
// app.use(express.urlencoded()); // to support URL-encoded bodies

/**
 * Listen on provided port, on all network interfaces.
 */
// var address = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';
//mongodb_uri is the name of the env created in mongolab for heroku.
var mongoURI = process.env.MONGODB_URI || 'mongodb://localhost/attic';
server.listen(port/* address*/);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function connect(){
  mongoose.connect(mongoURI, function (err, res) {
  if (err) {
    console.log ('ERROR connecting to: ' + uristring + '. ' + err);
  } else {
    console.log ('Succeeded connected to: ' + mongoURI);
  }
});
}



// function letsDoSomething(){
//   var user = new User("nicola", "bena");
//   var note = new Note(
//     {
//       title: "TagTitle",
//       text: "TextTitle"
//     };
//   );
// }

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // connect();
}
